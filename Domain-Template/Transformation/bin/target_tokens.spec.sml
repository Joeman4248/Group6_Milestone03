(*#line 30.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*)datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
        fun split(x, []   ) =  raise General.Fail("an_error")
          | split(x, y::ys) = if x=y then ys else split(x,ys);
                                                    
        fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
          | splitFirst(symbol,x::xs) = 	if x = symbol 
                        then (* found split point *)
                            []
                        else (* keep looking      *)
                            x::splitFirst(symbol,xs);
                                                                        
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
    
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 34.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\077\078\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\077\075\003\003\003\074\072\003\071\070\069\067\003\065\003\063\
\\061\059\059\059\059\059\059\059\059\059\003\058\053\051\050\003\
\\003\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\047\003\003\046\003\
\\003\043\039\009\009\035\029\009\009\025\009\009\009\009\009\009\
\\020\009\009\009\016\009\009\011\009\009\009\008\006\005\004\003\
\\003"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\012\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\013\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\014\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\015\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\017\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\018\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\019\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\021\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\022\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\023\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\024\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\028\010\010\010\010\010\010\010\026\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\027\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\032\010\010\010\010\010\010\010\010\010\010\010\010\010\030\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\031\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\033\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\034\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\036\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\037\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\038\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\040\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\041\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\042\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\044\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\045\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\054\054\054\054\054\054\054\054\054\054\054\054\054\054\054\
\\054\054\054\054\054\054\054\054\054\054\054\000\000\000\000\000\
\\000\054\054\054\054\054\054\054\054\054\054\054\054\054\054\054\
\\054\054\054\054\054\054\054\054\054\054\054\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\054\054\054\054\054\054\054\054\054\054\000\000\000\000\055\000\
\\000\054\054\054\054\054\054\054\054\054\054\054\054\054\054\054\
\\054\054\054\054\054\054\054\054\054\054\054\000\000\000\000\054\
\\000\054\054\054\054\054\054\054\054\054\054\054\054\054\054\054\
\\054\054\054\054\054\054\054\054\054\054\054\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\057\057\057\057\057\057\057\057\057\057\000\000\000\000\000\000\
\\000\057\057\057\057\057\057\057\057\057\057\057\057\057\057\057\
\\057\057\057\057\057\057\057\057\057\057\057\000\000\000\000\057\
\\000\057\057\057\057\057\057\057\057\057\057\057\057\057\057\057\
\\057\057\057\057\057\057\057\057\057\057\057\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\060\060\060\060\060\060\060\060\060\060\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\062\062\062\062\062\062\062\062\062\062\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\064\064\064\064\064\064\064\064\064\064\000\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\078\078\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 26)], trans = 0},
{fin = [(N 26),(N 107)], trans = 0},
{fin = [(N 26),(N 30)], trans = 0},
{fin = [(N 26)], trans = 6},
{fin = [(N 83)], trans = 0},
{fin = [(N 26),(N 28)], trans = 0},
{fin = [(N 12),(N 26),(N 116)], trans = 9},
{fin = [(N 12),(N 116)], trans = 9},
{fin = [(N 12),(N 26),(N 116)], trans = 11},
{fin = [(N 12),(N 116)], trans = 12},
{fin = [(N 12),(N 116)], trans = 13},
{fin = [(N 12),(N 116)], trans = 14},
{fin = [(N 12),(N 67),(N 116)], trans = 9},
{fin = [(N 12),(N 26),(N 116)], trans = 16},
{fin = [(N 12),(N 116)], trans = 17},
{fin = [(N 12),(N 116)], trans = 18},
{fin = [(N 12),(N 116),(N 130)], trans = 9},
{fin = [(N 12),(N 26),(N 116)], trans = 20},
{fin = [(N 12),(N 116)], trans = 21},
{fin = [(N 12),(N 116)], trans = 22},
{fin = [(N 12),(N 116)], trans = 23},
{fin = [(N 12),(N 77),(N 116)], trans = 9},
{fin = [(N 12),(N 26),(N 116)], trans = 25},
{fin = [(N 12),(N 116)], trans = 26},
{fin = [(N 12),(N 48),(N 116)], trans = 9},
{fin = [(N 12),(N 56),(N 116)], trans = 9},
{fin = [(N 12),(N 26),(N 116)], trans = 29},
{fin = [(N 12),(N 116)], trans = 30},
{fin = [(N 12),(N 71),(N 116)], trans = 9},
{fin = [(N 12),(N 116)], trans = 32},
{fin = [(N 12),(N 116)], trans = 33},
{fin = [(N 12),(N 116)], trans = 18},
{fin = [(N 12),(N 26),(N 116)], trans = 35},
{fin = [(N 12),(N 116)], trans = 36},
{fin = [(N 12),(N 116)], trans = 37},
{fin = [(N 12),(N 61),(N 116)], trans = 9},
{fin = [(N 12),(N 26),(N 116)], trans = 39},
{fin = [(N 12),(N 116)], trans = 40},
{fin = [(N 12),(N 116)], trans = 41},
{fin = [(N 12),(N 53),(N 116)], trans = 9},
{fin = [(N 12),(N 26),(N 116)], trans = 43},
{fin = [(N 12),(N 116)], trans = 44},
{fin = [(N 12),(N 113),(N 116)], trans = 9},
{fin = [(N 26),(N 109)], trans = 0},
{fin = [(N 26)], trans = 47},
{fin = [], trans = 48},
{fin = [(N 24)], trans = 0},
{fin = [(N 26),(N 87)], trans = 0},
{fin = [(N 26),(N 38)], trans = 51},
{fin = [(N 90)], trans = 0},
{fin = [(N 26),(N 85)], trans = 53},
{fin = [], trans = 54},
{fin = [], trans = 55},
{fin = [], trans = 56},
{fin = [(N 20)], trans = 56},
{fin = [(N 26),(N 36)], trans = 0},
{fin = [(N 9),(N 26),(N 120)], trans = 59},
{fin = [(N 9),(N 120)], trans = 59},
{fin = [(N 9),(N 26),(N 120)], trans = 61},
{fin = [(N 9)], trans = 61},
{fin = [(N 26),(N 101)], trans = 63},
{fin = [(N 6)], trans = 64},
{fin = [(N 26),(N 97)], trans = 65},
{fin = [(N 44)], trans = 0},
{fin = [(N 26),(N 95)], trans = 67},
{fin = [(N 41)], trans = 0},
{fin = [(N 26),(N 99)], trans = 0},
{fin = [(N 26),(N 34)], trans = 0},
{fin = [(N 26),(N 32)], trans = 0},
{fin = [(N 26)], trans = 72},
{fin = [(N 80)], trans = 0},
{fin = [(N 26),(N 103)], trans = 0},
{fin = [(N 26),(N 105)], trans = 75},
{fin = [(N 93)], trans = 0},
{fin = [(N 2),(N 26)], trans = 77},
{fin = [(N 2)], trans = 77}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  101 => let val yytext=yymktext() in (*#line 85.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 669.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 103 => let val yytext=yymktext() in (*#line 86.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 671.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 105 => let val yytext=yymktext() in (*#line 87.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 673.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 107 => let val yytext=yymktext() in (*#line 88.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 675.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 109 => let val yytext=yymktext() in (*#line 89.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 677.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 113 => let val yytext=yymktext() in (*#line 90.12 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 679.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 116 => let val yytext=yymktext() in (*#line 92.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("id" , yytext, getNextTokenPos(yytext))    (*#line 681.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 52.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("id"        , yytext,     getNextTokenPos(yytext))    (*#line 683.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 120 => let val yytext=yymktext() in (*#line 93.15 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("integer" , yytext, getNextTokenPos(yytext))(*#line 685.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 130 => let val yytext=yymktext() in (*#line 94.15 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("boolean" , yytext, getNextTokenPos(yytext))(*#line 687.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 2 => let val yytext=yymktext() in (*#line 48.18 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 689.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 20 => let val yytext=yymktext() in (*#line 56.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 691.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 24 => let val yytext=yymktext() in (*#line 57.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 693.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 26 => let val yytext=yymktext() in (*#line 59.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 695.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 28 => let val yytext=yymktext() in (*#line 61.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 697.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 30 => let val yytext=yymktext() in (*#line 62.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 699.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 32 => let val yytext=yymktext() in (*#line 63.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 701.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 34 => let val yytext=yymktext() in (*#line 64.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 703.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 36 => let val yytext=yymktext() in (*#line 65.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 705.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 38 => let val yytext=yymktext() in (*#line 66.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 707.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 67.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 709.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 44 => let val yytext=yymktext() in (*#line 68.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 711.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 48 => let val yytext=yymktext() in (*#line 69.12 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 713.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 53 => let val yytext=yymktext() in (*#line 70.13 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 715.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 56 => let val yytext=yymktext() in (*#line 71.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 717.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 49.18 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 719.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 61 => let val yytext=yymktext() in (*#line 72.13 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 721.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 73.14 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 723.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 71 => let val yytext=yymktext() in (*#line 74.12 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 725.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 77 => let val yytext=yymktext() in (*#line 75.14 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 727.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 80 => let val yytext=yymktext() in (*#line 76.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 729.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 77.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 731.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 78.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 733.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 87 => let val yytext=yymktext() in (*#line 79.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 735.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 9 => let val yytext=yymktext() in (*#line 51.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("integer"   , yytext,     getNextTokenPos(yytext))    (*#line 737.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 90 => let val yytext=yymktext() in (*#line 80.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 739.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 93 => let val yytext=yymktext() in (*#line 81.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 741.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 82.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 743.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 97 => let val yytext=yymktext() in (*#line 83.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 745.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 99 => let val yytext=yymktext() in (*#line 84.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 747.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_03\M3_Package\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
